{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aman9\\\\OneDrive\\\\Desktop\\\\TYPESPEED\\\\Typing-Speed-Test-React\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SAMPLE_TEXT = `The quick brown fox jumps over the lazy dog. This is a test to measure how fast you can type within 30 seconds. Typing speed is measured in words per minute (WPM). To improve your speed, practice typing regularly. Accuracy is just as important as speed, so focus on both.`;\nfunction TypingSpeedTest() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [isActive, setIsActive] = useState(false);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(100);\n  const [testComplete, setTestComplete] = useState(false);\n\n  // Calculate WPM and accuracy\n  const calculateStats = useCallback(() => {\n    if (inputText.length === 0) return;\n\n    // Calculate WPM\n    const wordsTyped = inputText.trim().split(/\\s+/).length;\n    const minutes = (30 - timeLeft) / 60;\n    const calculatedWpm = minutes > 0 ? Math.round(wordsTyped / minutes) : 0;\n    setWpm(calculatedWpm);\n\n    // Calculate accuracy\n    let correctChars = 0;\n    for (let i = 0; i < inputText.length; i++) {\n      if (i < SAMPLE_TEXT.length && inputText[i] === SAMPLE_TEXT[i]) {\n        correctChars++;\n      }\n    }\n    const calculatedAccuracy = Math.round(correctChars / inputText.length * 100) || 0;\n    setAccuracy(calculatedAccuracy);\n  }, [inputText, timeLeft]);\n\n  // Timer effect\n  useEffect(() => {\n    let timer;\n    if (isActive && timeLeft > 0) {\n      timer = setInterval(() => {\n        setTimeLeft(prevTime => {\n          if (prevTime <= 1) {\n            clearInterval(timer);\n            setTestComplete(true);\n          }\n          return prevTime - 1;\n        });\n        calculateStats();\n      }, 1000);\n    }\n    return () => clearInterval(timer);\n  }, [isActive, timeLeft, calculateStats]);\n\n  // Handle input changes\n  const handleInputChange = e => {\n    const userInput = e.target.value;\n    setInputText(userInput);\n    if (!isActive && userInput.length > 0) {\n      setIsActive(true);\n    }\n    calculateStats();\n  };\n\n  // Render the sample text with highlighting\n  const renderSampleText = () => {\n    return SAMPLE_TEXT.split(\"\").map((char, index) => {\n      let className = \"\";\n      if (index < inputText.length) {\n        className = inputText[index] === char ? \"correct\" : \"incorrect\";\n      }\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: className,\n        children: char\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Reset the test\n  const resetTest = () => {\n    setInputText(\"\");\n    setTimeLeft(30);\n    setIsActive(false);\n    setWpm(0);\n    setAccuracy(100);\n    setTestComplete(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing-test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Typing Speed Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sample-text\",\n      children: renderSampleText()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: inputText,\n      onChange: handleInputChange,\n      disabled: timeLeft === 0,\n      placeholder: \"Start typing here...\",\n      className: \"typing-input\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"timer\",\n        children: [\"Time Left: \", timeLeft, \" sec\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"speed\",\n        children: [\"Speed: \", wpm, \" WPM\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"accuracy\",\n        children: [\"Accuracy: \", accuracy, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), testComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your typing speed: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [wpm, \" WPM\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Accuracy: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [accuracy, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetTest,\n      className: \"reset-button\",\n      children: testComplete ? \"Try Again\" : \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(TypingSpeedTest, \"dXqOQsDmNJj05M0lR4MJUOgQ+K8=\");\n_c = TypingSpeedTest;\nexport default TypingSpeedTest;\nvar _c;\n$RefreshReg$(_c, \"TypingSpeedTest\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","SAMPLE_TEXT","TypingSpeedTest","_s","inputText","setInputText","timeLeft","setTimeLeft","isActive","setIsActive","wpm","setWpm","accuracy","setAccuracy","testComplete","setTestComplete","calculateStats","length","wordsTyped","trim","split","minutes","calculatedWpm","Math","round","correctChars","i","calculatedAccuracy","timer","setInterval","prevTime","clearInterval","handleInputChange","e","userInput","target","value","renderSampleText","map","char","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","resetTest","onChange","disabled","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aman9/OneDrive/Desktop/TYPESPEED/Typing-Speed-Test-React/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nconst SAMPLE_TEXT = `The quick brown fox jumps over the lazy dog. This is a test to measure how fast you can type within 30 seconds. Typing speed is measured in words per minute (WPM). To improve your speed, practice typing regularly. Accuracy is just as important as speed, so focus on both.`;\r\n\r\nfunction TypingSpeedTest() {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [timeLeft, setTimeLeft] = useState(30);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [wpm, setWpm] = useState(0);\r\n  const [accuracy, setAccuracy] = useState(100);\r\n  const [testComplete, setTestComplete] = useState(false);\r\n\r\n  // Calculate WPM and accuracy\r\n  const calculateStats = useCallback(() => {\r\n    if (inputText.length === 0) return;\r\n    \r\n    // Calculate WPM\r\n    const wordsTyped = inputText.trim().split(/\\s+/).length;\r\n    const minutes = (30 - timeLeft) / 60;\r\n    const calculatedWpm = minutes > 0 ? Math.round(wordsTyped / minutes) : 0;\r\n    setWpm(calculatedWpm);\r\n    \r\n    // Calculate accuracy\r\n    let correctChars = 0;\r\n    for (let i = 0; i < inputText.length; i++) {\r\n      if (i < SAMPLE_TEXT.length && inputText[i] === SAMPLE_TEXT[i]) {\r\n        correctChars++;\r\n      }\r\n    }\r\n    const calculatedAccuracy = Math.round((correctChars / inputText.length) * 100) || 0;\r\n    setAccuracy(calculatedAccuracy);\r\n  }, [inputText, timeLeft]);\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    let timer;\r\n    \r\n    if (isActive && timeLeft > 0) {\r\n      timer = setInterval(() => {\r\n        setTimeLeft((prevTime) => {\r\n          if (prevTime <= 1) {\r\n            clearInterval(timer);\r\n            setTestComplete(true);\r\n          }\r\n          return prevTime - 1;\r\n        });\r\n        calculateStats();\r\n      }, 1000);\r\n    }\r\n    \r\n    return () => clearInterval(timer);\r\n  }, [isActive, timeLeft, calculateStats]);\r\n\r\n  // Handle input changes\r\n  const handleInputChange = (e) => {\r\n    const userInput = e.target.value;\r\n    setInputText(userInput);\r\n    \r\n    if (!isActive && userInput.length > 0) {\r\n      setIsActive(true);\r\n    }\r\n    \r\n    calculateStats();\r\n  };\r\n\r\n  // Render the sample text with highlighting\r\n  const renderSampleText = () => {\r\n    return SAMPLE_TEXT.split(\"\").map((char, index) => {\r\n      let className = \"\";\r\n      \r\n      if (index < inputText.length) {\r\n        className = inputText[index] === char ? \"correct\" : \"incorrect\";\r\n      }\r\n      \r\n      return (\r\n        <span key={index} className={className}>\r\n          {char}\r\n        </span>\r\n      );\r\n    });\r\n  };\r\n\r\n  // Reset the test\r\n  const resetTest = () => {\r\n    setInputText(\"\");\r\n    setTimeLeft(30);\r\n    setIsActive(false);\r\n    setWpm(0);\r\n    setAccuracy(100);\r\n    setTestComplete(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"typing-test-container\">\r\n      <h2>Typing Speed Test</h2>\r\n      \r\n      <div className=\"sample-text\">\r\n        {renderSampleText()}\r\n      </div>\r\n      \r\n      <textarea\r\n        value={inputText}\r\n        onChange={handleInputChange}\r\n        disabled={timeLeft === 0}\r\n        placeholder=\"Start typing here...\"\r\n        className=\"typing-input\"\r\n      />\r\n      \r\n      <div className=\"stats\">\r\n        <div className=\"timer\">Time Left: {timeLeft} sec</div>\r\n        <div className=\"speed\">Speed: {wpm} WPM</div>\r\n        <div className=\"accuracy\">Accuracy: {accuracy}%</div>\r\n      </div>\r\n      \r\n      {testComplete && (\r\n        <div className=\"results\">\r\n          <h3>Test Complete!</h3>\r\n          <p>Your typing speed: <strong>{wpm} WPM</strong></p>\r\n          <p>Accuracy: <strong>{accuracy}%</strong></p>\r\n        </div>\r\n      )}\r\n      \r\n      <button onClick={resetTest} className=\"reset-button\">\r\n        {testComplete ? \"Try Again\" : \"Reset\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TypingSpeedTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}