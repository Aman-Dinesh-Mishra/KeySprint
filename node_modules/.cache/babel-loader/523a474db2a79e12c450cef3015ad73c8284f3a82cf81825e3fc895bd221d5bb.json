{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aman9\\\\OneDrive\\\\Desktop\\\\TYPESPEED\\\\Typing-Speed-Test-React\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sampleText = `The quick brown fox jumps over the lazy dog. This is a test to measure how fast you can type within 30 seconds. Typing speed is measured in words per minute (WPM). To improve your speed, practice typing regularly. Accuracy is just as important as speed, so focus on both.`;\nconst TypingSpeedTest = () => {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [timeLeft, setTimeLeft] = useState(30);\n  const [isTyping, setIsTyping] = useState(false);\n  const [wpm, setWpm] = useState(0);\n  const [startTime, setStartTime] = useState(null);\n\n  // Validate text with memoization to minimize re-renders\n  const highlightedText = useMemo(() => {\n    return inputText.split(\"\").map((char, index) => ({\n      char,\n      correct: sampleText[index] === char\n    }));\n  }, [inputText]);\n  const calculateWPM = useCallback(() => {\n    const wordsTyped = inputText.trim().split(/\\s+/).length;\n    setWpm(Math.round(wordsTyped * 60 / 30)); // WPM = Words * 60 / Total Time\n  }, [inputText]);\n\n  // Timer logic\n  useEffect(() => {\n    let timerInterval;\n    if (isTyping && timeLeft > 0) {\n      if (!startTime) setStartTime(Date.now());\n      timerInterval = setInterval(() => {\n        const elapsedTime = Math.floor((Date.now() - startTime) / 1000);\n        const remainingTime = 30 - elapsedTime;\n        setTimeLeft(Math.max(remainingTime, 0));\n      }, 100);\n      if (timeLeft === 0) {\n        clearInterval(timerInterval);\n        calculateWPM();\n      }\n    }\n    return () => clearInterval(timerInterval);\n  }, [isTyping, timeLeft, startTime, calculateWPM]);\n  const handleInputChange = useCallback(e => {\n    const userInput = e.target.value;\n    if (!isTyping) setIsTyping(true);\n    setInputText(userInput);\n  }, [setInputText, setIsTyping]);\n  const resetTest = () => {\n    setInputText(\"\");\n    setTimeLeft(30);\n    setIsTyping(false);\n    setWpm(0);\n    setStartTime(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing-test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"typing-test-heading\",\n      children: \"Typing Speed Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"typing-test-text\",\n      children: sampleText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-text-display\",\n      children: highlightedText.map((charObj, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: charObj.correct ? \"typing-text-correct\" : \"typing-text-wrong\",\n        children: charObj.char\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"typing-textarea\",\n      value: inputText,\n      onChange: handleInputChange,\n      disabled: timeLeft === 0,\n      placeholder: \"Start typing here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"typing-timer\",\n      children: [\"Time Left: \", timeLeft, \" sec\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), timeLeft === 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"typing-speed\",\n      children: [\"Your Typing Speed: \", wpm, \" WPM\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"typing-restart-button\",\n      onClick: resetTest,\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingSpeedTest, \"TCfEiFOTlp7jdFGEsge5f05eJo0=\");\n_c = TypingSpeedTest;\nexport default TypingSpeedTest;\nvar _c;\n$RefreshReg$(_c, \"TypingSpeedTest\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","sampleText","TypingSpeedTest","_s","inputText","setInputText","timeLeft","setTimeLeft","isTyping","setIsTyping","wpm","setWpm","startTime","setStartTime","highlightedText","split","map","char","index","correct","calculateWPM","wordsTyped","trim","length","Math","round","timerInterval","Date","now","setInterval","elapsedTime","floor","remainingTime","max","clearInterval","handleInputChange","e","userInput","target","value","resetTest","className","children","fileName","_jsxFileName","lineNumber","columnNumber","charObj","onChange","disabled","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aman9/OneDrive/Desktop/TYPESPEED/Typing-Speed-Test-React/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst sampleText = `The quick brown fox jumps over the lazy dog. This is a test to measure how fast you can type within 30 seconds. Typing speed is measured in words per minute (WPM). To improve your speed, practice typing regularly. Accuracy is just as important as speed, so focus on both.`;\r\n\r\nconst TypingSpeedTest = () => {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [timeLeft, setTimeLeft] = useState(30);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const [wpm, setWpm] = useState(0);\r\n  const [startTime, setStartTime] = useState(null);\r\n\r\n  // Validate text with memoization to minimize re-renders\r\n  const highlightedText = useMemo(() => {\r\n    return inputText.split(\"\").map((char, index) => ({\r\n      char,\r\n      correct: sampleText[index] === char,\r\n    }));\r\n  }, [inputText]);\r\n\r\n  const calculateWPM = useCallback(() => {\r\n    const wordsTyped = inputText.trim().split(/\\s+/).length;\r\n    setWpm(Math.round((wordsTyped * 60) / 30)); // WPM = Words * 60 / Total Time\r\n  }, [inputText]);\r\n\r\n  // Timer logic\r\n  useEffect(() => {\r\n    let timerInterval;\r\n    if (isTyping && timeLeft > 0) {\r\n      if (!startTime) setStartTime(Date.now());\r\n      timerInterval = setInterval(() => {\r\n        const elapsedTime = Math.floor((Date.now() - startTime) / 1000);\r\n        const remainingTime = 30 - elapsedTime;\r\n        setTimeLeft(Math.max(remainingTime, 0));\r\n      }, 100);\r\n\r\n      if (timeLeft === 0) {\r\n        clearInterval(timerInterval);\r\n        calculateWPM();\r\n      }\r\n    }\r\n    return () => clearInterval(timerInterval);\r\n  }, [isTyping, timeLeft, startTime, calculateWPM]);\r\n\r\n  const handleInputChange = useCallback(\r\n    (e) => {\r\n      const userInput = e.target.value;\r\n      if (!isTyping) setIsTyping(true);\r\n      setInputText(userInput);\r\n    },\r\n    [setInputText, setIsTyping]\r\n  );\r\n\r\n  const resetTest = () => {\r\n    setInputText(\"\");\r\n    setTimeLeft(30);\r\n    setIsTyping(false);\r\n    setWpm(0);\r\n    setStartTime(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"typing-test-container\">\r\n      <h2 className=\"typing-test-heading\">Typing Speed Test</h2>\r\n      <p className=\"typing-test-text\">{sampleText}</p>\r\n\r\n      <div className=\"typing-text-display\">\r\n        {highlightedText.map((charObj, index) => (\r\n          <span\r\n            key={index}\r\n            className={charObj.correct ? \"typing-text-correct\" : \"typing-text-wrong\"}\r\n          >\r\n            {charObj.char}\r\n          </span>\r\n        ))}\r\n      </div>\r\n\r\n      <textarea\r\n        className=\"typing-textarea\"\r\n        value={inputText}\r\n        onChange={handleInputChange}\r\n        disabled={timeLeft === 0}\r\n        placeholder=\"Start typing here...\"\r\n      />\r\n\r\n      <h3 className=\"typing-timer\">Time Left: {timeLeft} sec</h3>\r\n      {timeLeft === 0 ? (\r\n        <h3 className=\"typing-speed\">Your Typing Speed: {wpm} WPM</h3>\r\n      ) : null}\r\n\r\n      <button className=\"typing-restart-button\" onClick={resetTest}>\r\n        Restart\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingSpeedTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}