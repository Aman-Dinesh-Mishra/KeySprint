{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aman9\\\\OneDrive\\\\Desktop\\\\TYPESPEED\\\\Typing-Speed-Test-React\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\n\n// Text sample moved outside component to prevent unnecessary re-renders\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SAMPLE_TEXT = `The quick brown fox jumps over the lazy dog. This is a test to measure how fast you can type within 30 seconds. Typing speed is measured in words per minute (WPM).To improve your speed, practice typing regularly. \nAccuracy is just as important as speed, so focus on both.`;\nconst TEST_DURATION = 30; // Constant for test duration in seconds\n\nconst TypingSpeedTest = () => {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [timeLeft, setTimeLeft] = useState(TEST_DURATION);\n  const [isActive, setIsActive] = useState(false);\n  const [wpm, setWpm] = useState(0);\n\n  // Memoized validation instead of storing in state\n  const highlightedText = useMemo(() => inputText.split(\"\").map((char, index) => ({\n    char,\n    correct: SAMPLE_TEXT[index] === char\n  })), [inputText]);\n\n  // Memoized accuracy calculation\n  const accuracy = useMemo(() => {\n    if (inputText.length === 0) return 0;\n    const correctChars = highlightedText.filter(item => item.correct).length;\n    return Math.round(correctChars / inputText.length * 100);\n  }, [highlightedText, inputText.length]);\n\n  // Optimized WPM calculation\n  const calculateWPM = useCallback(() => {\n    const wordsTyped = inputText.trim().split(/\\s+/).length;\n    const timeSpent = TEST_DURATION - timeLeft;\n    // Guard against division by zero\n    const calculatedWpm = timeSpent > 0 ? Math.round(wordsTyped * 60 / timeSpent) : 0;\n    setWpm(calculatedWpm);\n  }, [inputText, timeLeft]);\n\n  // Timer effect\n  useEffect(() => {\n    let timerId;\n    if (isActive && timeLeft > 0) {\n      timerId = setInterval(() => {\n        setTimeLeft(prevTime => {\n          const newTime = prevTime - 1;\n          // Calculate WPM on each tick for live feedback\n          if (newTime >= 0) calculateWPM();\n          return newTime;\n        });\n      }, 1000);\n    }\n    return () => clearInterval(timerId);\n  }, [isActive, calculateWPM]);\n\n  // Input handler with debounced first-keystroke activation\n  const handleInputChange = e => {\n    const userInput = e.target.value;\n    setInputText(userInput);\n    if (!isActive && userInput.length > 0) {\n      setIsActive(true);\n    }\n  };\n\n  // Reset handler\n  const resetTest = () => {\n    setInputText(\"\");\n    setTimeLeft(TEST_DURATION);\n    setIsActive(false);\n    setWpm(0);\n  };\n\n  // Test completion status\n  const isTestComplete = timeLeft === 0;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing-test-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"typing-test-heading\",\n      children: \"Typing Speed Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-sample-text\",\n      children: SAMPLE_TEXT.split(\"\").map((char, index) => {\n        var _highlightedText$inde;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: index < inputText.length ? (_highlightedText$inde = highlightedText[index]) !== null && _highlightedText$inde !== void 0 && _highlightedText$inde.correct ? \"sample-text-completed\" : \"sample-text-error\" : \"\",\n          children: char\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"typing-textarea\",\n      value: inputText,\n      onChange: handleInputChange,\n      disabled: isTestComplete,\n      placeholder: \"Start typing here...\",\n      \"aria-label\": \"Typing test input area\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-stats\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-timer\",\n        children: [\"Time Left: \", timeLeft, \" sec\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-speed\",\n        children: [\"Speed: \", wpm, \" WPM\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typing-accuracy\",\n        children: [\"Accuracy: \", accuracy, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), isTestComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Test Complete!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your final typing speed: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [wpm, \" WPM\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 39\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Accuracy: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [accuracy, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"typing-restart-button\",\n      onClick: resetTest,\n      children: isTestComplete ? \"Try Again\" : \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingSpeedTest, \"N66jhFMs0I3EbL5bts3JCMTc+V4=\");\n_c = TypingSpeedTest;\nexport default TypingSpeedTest;\nvar _c;\n$RefreshReg$(_c, \"TypingSpeedTest\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","jsxDEV","_jsxDEV","SAMPLE_TEXT","TEST_DURATION","TypingSpeedTest","_s","inputText","setInputText","timeLeft","setTimeLeft","isActive","setIsActive","wpm","setWpm","highlightedText","split","map","char","index","correct","accuracy","length","correctChars","filter","item","Math","round","calculateWPM","wordsTyped","trim","timeSpent","calculatedWpm","timerId","setInterval","prevTime","newTime","clearInterval","handleInputChange","e","userInput","target","value","resetTest","isTestComplete","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_highlightedText$inde","onChange","disabled","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/aman9/OneDrive/Desktop/TYPESPEED/Typing-Speed-Test-React/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\n\r\n// Text sample moved outside component to prevent unnecessary re-renders\r\nconst SAMPLE_TEXT = `The quick brown fox jumps over the lazy dog. This is a test to measure how fast you can type within 30 seconds. Typing speed is measured in words per minute (WPM).To improve your speed, practice typing regularly. \r\nAccuracy is just as important as speed, so focus on both.`;\r\n\r\nconst TEST_DURATION = 30; // Constant for test duration in seconds\r\n\r\nconst TypingSpeedTest = () => {\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [timeLeft, setTimeLeft] = useState(TEST_DURATION);\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [wpm, setWpm] = useState(0);\r\n\r\n  // Memoized validation instead of storing in state\r\n  const highlightedText = useMemo(() => \r\n    inputText.split(\"\").map((char, index) => ({\r\n      char,\r\n      correct: SAMPLE_TEXT[index] === char,\r\n    })),\r\n    [inputText]\r\n  );\r\n\r\n  // Memoized accuracy calculation\r\n  const accuracy = useMemo(() => {\r\n    if (inputText.length === 0) return 0;\r\n    const correctChars = highlightedText.filter(item => item.correct).length;\r\n    return Math.round((correctChars / inputText.length) * 100);\r\n  }, [highlightedText, inputText.length]);\r\n\r\n  // Optimized WPM calculation\r\n  const calculateWPM = useCallback(() => {\r\n    const wordsTyped = inputText.trim().split(/\\s+/).length;\r\n    const timeSpent = TEST_DURATION - timeLeft;\r\n    // Guard against division by zero\r\n    const calculatedWpm = timeSpent > 0 \r\n      ? Math.round((wordsTyped * 60) / timeSpent)\r\n      : 0;\r\n    setWpm(calculatedWpm);\r\n  }, [inputText, timeLeft]);\r\n\r\n  // Timer effect\r\n  useEffect(() => {\r\n    let timerId;\r\n    \r\n    if (isActive && timeLeft > 0) {\r\n      timerId = setInterval(() => {\r\n        setTimeLeft(prevTime => {\r\n          const newTime = prevTime - 1;\r\n          // Calculate WPM on each tick for live feedback\r\n          if (newTime >= 0) calculateWPM();\r\n          return newTime;\r\n        });\r\n      }, 1000);\r\n    } \r\n    \r\n    return () => clearInterval(timerId);\r\n  }, [isActive, calculateWPM]);\r\n\r\n  // Input handler with debounced first-keystroke activation\r\n  const handleInputChange = (e) => {\r\n    const userInput = e.target.value;\r\n    setInputText(userInput);\r\n    \r\n    if (!isActive && userInput.length > 0) {\r\n      setIsActive(true);\r\n    }\r\n  };\r\n\r\n  // Reset handler\r\n  const resetTest = () => {\r\n    setInputText(\"\");\r\n    setTimeLeft(TEST_DURATION);\r\n    setIsActive(false);\r\n    setWpm(0);\r\n  };\r\n\r\n  // Test completion status\r\n  const isTestComplete = timeLeft === 0;\r\n\r\n  return (\r\n    <div className=\"typing-test-container\">\r\n      <h2 className=\"typing-test-heading\">Typing Speed Test</h2>\r\n      \r\n      <div className=\"typing-sample-text\">\r\n        {SAMPLE_TEXT.split(\"\").map((char, index) => (\r\n          <span \r\n            key={index} \r\n            className={\r\n              index < inputText.length \r\n                ? highlightedText[index]?.correct \r\n                  ? \"sample-text-completed\" \r\n                  : \"sample-text-error\"\r\n                : \"\"\r\n            }\r\n          >\r\n            {char}\r\n          </span>\r\n        ))}\r\n      </div>\r\n\r\n      <textarea\r\n        className=\"typing-textarea\"\r\n        value={inputText}\r\n        onChange={handleInputChange}\r\n        disabled={isTestComplete}\r\n        placeholder=\"Start typing here...\"\r\n        aria-label=\"Typing test input area\"\r\n      />\r\n\r\n      <div className=\"typing-stats\">\r\n        <div className=\"typing-timer\">Time Left: {timeLeft} sec</div>\r\n        <div className=\"typing-speed\">Speed: {wpm} WPM</div>\r\n        <div className=\"typing-accuracy\">Accuracy: {accuracy}%</div>\r\n      </div>\r\n\r\n      {isTestComplete && (\r\n        <div className=\"typing-results\">\r\n          <h3>Test Complete!</h3>\r\n          <p>Your final typing speed: <strong>{wpm} WPM</strong></p>\r\n          <p>Accuracy: <strong>{accuracy}%</strong></p>\r\n        </div>\r\n      )}\r\n\r\n      <button \r\n        className=\"typing-restart-button\"\r\n        onClick={resetTest}\r\n      >\r\n        {isTestComplete ? \"Try Again\" : \"Restart\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypingSpeedTest;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}